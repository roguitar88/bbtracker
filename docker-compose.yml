version: '3.3'
# version: '3.8'

services:
  # PostgreSQL
  postgres:
    container_name: bbtracker-postgres
    # restart: always
    restart: unless-stopped
    image: postgres:latest # postgres:11.5
    # build:
      # context: ./server/models
      # dockerfile: Dockerfile
    # user: ubuntu
    environment:
      # - POSTGRES_PASSWORD=${DB_PASSWORD}
      # - POSTGRES_DB=${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME} # Is this important?
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - '5433:5432'
    # working_dir: /
    networks:
      - shared-network
    volumes:
      # - ./db:/var/lib/postgresql/data
      # - ./.postgres/db/bbtracker.sql:/docker-entrypoint-initdb.d/bbtracker.sql
      - ./.postgres/db:/docker-entrypoint-initdb.d/
      # - ./.postgres/db/bbtracker.pgsql:/bbtracker.pgsql
    # command: psql -U postgres -d bbtracker -f /docker-entrypoint-initdb.d/bbtracker.pgsql

  # NodeJS server
  server:
    container_name: bbtracker-server
    restart: unless-stopped
    # restart: always
    image: node:18.12.0
    # build:
      # context: ./server
      # target: production
      # dockerfile: Dockerfile
    ports:
      - '3001:3001'
    working_dir: /server
    volumes:
      # - ./:/var/www
      - ./server:/server
      # - .env:/server/.env
      # - .env.development:/server/.env.development
      # - .env.production:/server/.env.production
      - ./.certbot/conf:/etc/letsencrypt
    command: >
      bash -c "npm config set unsafe-perm true
      && npm install -g npm
      && npm install
      && npm run start"
    networks:
      - shared-network
    depends_on:
      - postgres

  # ReactJS client
  client:
    container_name: bbtracker-client
    # stdin_open: true
    # restart: unless-stopped
    image: node:18.12.0
    # build:
      # context: ./client
      # target: production
      # dockerfile: Dockerfile
    # ports:
      # - '3000:3000'
      # - '81:80'
    volumes:
      # - ./:/var/www
      - ./client:/client
    working_dir: /client
    command: >
      bash -c "npm config set unsafe-perm true
      && npm install -g npm
      && npm install
      && npm run build"
    networks:
      - shared-network
    # depends_on:
      # - server
      # - nginx

  wsapi:
    container_name: bbtracker-wsapi
    # restart: always
    restart: unless-stopped
    image: node:18.12.0
    # build:
      # context: ./wsapi
      # target: production
      # dockerfile: Dockerfile
    ports:
      - '3003:3003'
    working_dir: /wsapi
    volumes:
      # - ./:/var/www
      - ./wsapi:/wsapi
      # - .env:/wsapi/.env
      # - .env.development:/wsapi/.env.development
      # - .env.production:/wsapi/.env.production
      - ./.certbot/conf:/etc/letsencrypt
    command: >
      bash -c "npm config set unsafe-perm true
      && npm install -g npm
      && npm install
      && npm run start"
    networks:
      - shared-network
    depends_on:
      # - server
      - postgres

  # Nginx
  nginx:
    container_name: bbtracker-nginx
    # image: nginx:alpine
    # image: nginx:stable-alpine
    image: nginx:latest
    restart: unless-stopped
    # restart: always
    # user: ubuntu
    # deploy:
      # replicas: 5
      # resources:
        # limits:
          # cpus: "0.1"
          # memory: 50M
      # restart_policy:
        # condition: on-failure
    # tty: true
    # command: ["nginx", "-g", "daemon off;"]
    ports:
      - '80:80'
      - '443:443'
    working_dir: /etc/nginx/
    volumes:
      # - ./kernel/sysctl.conf:/etc/sysctl.conf #no file
      # - ./kernel/limits.conf:/etc/security/limits.conf
      # - ./.kernel/tcp_fin_timeout:/proc/sys/net/ipv4/tcp_fin_timeout
      # - ./.kernel/tcp_max_syn_backlog:/proc/sys/net/ipv4/tcp_max_syn_backlog
      # - ./.kernel/ip_local_port_range:/proc/sys/net/ipv4/ip_local_port_range
      # - ./.kernel/somaxconn:/proc/sys/net/core/somaxconn
      # - ./.kernel/netdev_max_backlog:/proc/sys/net/core/netdev_max_backlog # no file
      # - ./:/var/www
      - ./.nginx/logs:/var/log/nginx
      - ./client:/client
      - ./wsapi:/wsapi # Test commenting this
      # - ./server:/server
      # - ./nginx/sites-enabled/:/etc/nginx/conf.d/
      - ./.nginx/conf.d:/etc/nginx/conf.d
      - ./.nginx/iprestriction:/etc/nginx/iprestriction
      - ./.nginx/custom-nginx.conf:/etc/nginx/custom-nginx.conf
      - ./.nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./.nginx/certbot.conf:/etc/nginx/certbot.conf
      # - ./.nginx/sites-enabled/${NGINX_CONF}:/etc/nginx/sites-enabled/default.conf
      - ./.nginx/sites-enabled:/etc/nginx/sites-enabled
      # - ./.certbot/www:/var/www/certbot/:ro
      - ./.certbot/www:/certbot/www
      # - ./.certbot/ssl:/etc/ssl/:ro # You can discard this one
      - ./.certbot/ssl:/etc/ssl # You can discard this one
      # - ./.certbot/conf:/etc/letsencrypt/:ro
      - ./.certbot/conf:/etc/letsencrypt
    # links:
      # - app
      # - mysql
    # command: chown -Rf www-data:www-data /etc/letsencrypt/live/*
    networks:
      - shared-network
    depends_on:
      # - server
      - client
      - wsapi
      # - postgres

networks:
  shared-network:
    driver: bridge